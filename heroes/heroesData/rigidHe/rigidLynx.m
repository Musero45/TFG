function he = rigidLynx(atmosphere)
%RIGIDLYNX  Builds up a rigid Lynx helicopter
%
% The DRA (RAE) research Lynx, ZD559. Information taken from [1]
% The Westland Lynx Mk 7 is a twin engine, utility/battlefield helicopter 
% in the 4.5-ton category currently in service with the British Army Air 
% Corps. The DRA Research Lynx was delivered off the production line to 
% RAE as an Mk 5 in 1985 and modified to Mk 7 standard in 1992. The 
% aircraft is fitted with a comprehensive instrumentation suite and
% digital recording system. Special features include a strain-gauge 
% fatigue usage monitoring fit, and pressure- and strain-instrumented 
% rotor blades for fitment on both the main and tail rotor. The aircraft 
% has been used extensively in a research programme to calibrate agility
% standards of future helicopter types. The four-bladed hingeless rotor is 
% capable of producing large control moments and hence angular 
% accelerations. A 1960's design, the Lynx embodies many features with 
% significant innovation for its age ? hinge"mass blade"less rotor with cambered 
% aerofoil sections (RAE 9615, 9617), titanium monoblock rotor head and 
% conformal gears.
%
% On reference [2] detailed technical data of Lynx can be found. However,
% it does not seem clear at all that the Lynx of [2] is equipped with
% standard blades of reference [1]. Therefore and for the moment being
% blade properties of [2] are not considered (see MISSING DATA below)
% [1] G.D. Padfield Helicopter Flight Dynamics, 1996.
% [2] B.H.Lau, A.W. Louie, N. Griffiths, C.P. Sotiriou Performance and
%     Rotor Loads Measurements of the Lynx XZ170 Helicopter with 
%     Rectangular Blades NASA-TM-104000, May 1993.
%
% TODO
%
% Despite the fact the left horizontal tail plane is not active because
% there is no such a HTP the function velocities is not able to compute
% velocities when the left HTP data, such as chord, surface etc, are set to
% zero. Using the component field 'active' the function velocities should
% be rewritten avoiding computations where are not required.
%
% MISSING DATA
% There are some data which is not included in the information given by [1]
% and it has to be complemented from other references, i.e. [2].
%
% MAIN ROTOR DATA 
%        * flap hinge offset of main rotor blades: e (it seems that [1] 
%          does not use it)
%        * rotor blades mass per unit of length: bm
%        * gravity center of rotor blades: xGB
%        * lag and pitch inertia moments of main rotor blade: ITheta, IZeta,
% 
% The following list is the set of variables provided by [1] to define the
% helisim model of lynx. First column is reference[1]notation and second
% column is heroes notation. This list can be used as a check list to
% translate technical data from [1] to heroes rigid helicopter data
% 
% a0             mainRotor.cldata(1) [used] check!
% a0T            tailRotor.cldata(1) [used] check!
% alpha_tp0      leftHTP.theta and rightHTP.theta  [used] check!
% beta_fn0       verticalFin.theta  [used] check!
% c              mainRotor.c0 [used] check!
% gT             tailRotor gearing [not directly used]
%                tailRotor.Omega = mainRotor.Omega*gT [used] check!
% hR             geometry.h [used] check!
% hT             minus geometry.hTR [used] check!
% IBeta          mainRotor.IBeta [used] check! 
% Ixx            inertia.Ix [used] check! 
% Ixz            inertia.Ixz [used] check! 
% Iyy            inertia.Iy [used] check! 
% Izz            inertia.Iz [used] check! 
% kBeta          mainRotor.kBeta [used] check!
% l_fn           geometry.lvf [used] check!
% l_tp           geometry.llHTP = geometry.lrHTP [used] check!
% l_T            geometry.ltr [used] check!
% Ma             inertia.W [used] check!
% Nb             mainRotor.b [used] check!
% R              mainRotor.R [used] check!
% RT             tailRotor.R [used] check!
% Sfn            verticalFin.Svf [used] check!
% Stp            rightHTP.Svf / 2 = leftHTP.Svf / 2 [used] check!
% sT             tailRotor solidity [not directly used]
% xcg            geometry.xcg [used] check!
% delta0         mainRotor.cddata(1) [used] check!
% delta2         mainRotor.cddata(3) [used] check!**
%                watchout with this variable. At reference [1] delta2 it is
%                denoted that is main rotor lift dependent profile drag
%                coefficient but given the values provided by Padfield I
%                honestely doubt that 37.9 is an actual delta2 value
% delta3         tail rotor delta3 angle (atan(k_3))
% deltaT0        mainRotor.cddata(1) [used] check!
% deltaT2        mainRotor.cddata(3) [used] check!
% gamma          Lock number at sea level (assumption) [not used]
%                mainRotor.IBeta = rho0*a*c*R^4/gamma
% gamma_s        minus geometry.epsilony [used] check!
% lambda_beta2   squared undamped flap frequency without term of
%                xGB*Mp*e/(I_beta*Omega^2
% theta_tw       mainRotor.theta1  [used] check!
% Omega_idle     mainRotor.Omega [used] check!
%
% At 25/04/2014 this was a blatant ripoff of practLynx
% FIXME Growing structure. Some definitions will be added. To be documented

% 
a0           = 6.0;
a0T          = 6.0;
alpha_tp0    = -0.0175;
beta_fn0     = -0.0524;
c            = 0.391;
gT           = 5.8;
hR           = 1.274;
hT           = 1.146;
IBeta        = 678.14;
Ixx          = 2767.1;
Ixz          = 2034.8;
Iyy          = 13904.5;
Izz          = 12208.8;
kBeta        = 166352;
l_fn         = 7.48;
l_tp         = 7.66;
l_T          = 7.66;
Ma           = 4314.7;
Nb           = 4;
R            = 6.4;
RT           = 1.106;
Sfn          = 1.107;
Stp          = 1.197;
sT           = 0.208;              
xcg          = -0.0198;
delta0       = 0.009;
delta2       = 37.983;
% delta3       = -45*pi/180; % we do not have this variable
deltaT0      = 0.008;
deltaT2      = 5.334;
% gamma        = 7.12; % it is redundant
gamma_s      = 0.0698;
% lambda_beta2
theta_tw      = -0.14;
Omega_idle    = 35.63;


% Some constants
g             = atmosphere.g;

%--------------------------------------------------------------------------
% Some assumptions
%--------------------------------------------------------------------------
% Inertia moments of the blade
% ITheta inertia moment is considered very small and the value used in 
% the practLynx, and the lag inertia moment is computed using the 
% assumption of thin plate
ITheta       = 15; 
IZeta        = IBeta + ITheta; 

% Position of center of gravity of blade and blade mas per unit of length
% For the moment being oscar has used the values of the practLynx
xGB          = 2.51;
bm           = 60.3;

% Because delta2 values provided by Padfield are in doubt we impose a zero
% value
delta2       = 0.0;

% Number of tail rotor blades 
% Reference: Padfield page 261 looking at Lynx drawings
bT            = 4;

% mean chord of the right horizontal tail plane
% right horizontal tail plane span blHTP
% Reference: Padfield page 261 looking at Lynx drawings
brHTP         = 1.776;
crHTP         = Stp/brHTP;

% lateral distance to left horizontal tail plane centre of pressure
% Reference: my own
drHTP         = brHTP/2;

% rigid tail rotor
% Reference: my own
kBetaT        = 1e100;
%--------------------------------------------------------------------------

% Some computations
% tail rotor chord
cT            = sT*pi*RT/bT;

% Helicopter label definition
label = 'rigidLynx';

% main rotor structure definition
mainRotor = struct(...
            'class','rigidRotor',...
            'id',label,...
            'active','yes',...
            'R',R,...
            'e',0,...
            'b',Nb,...
            'theta1',theta_tw,...
            'cldata',[a0 0],...
            'cddata',[delta0 0 delta2],... 
            'profile',@cl1cd2,...
            'Omega',Omega_idle,...
            'c0',c,... 
            'c1',0,...  
            'IBeta',IBeta,...
            'ITheta',ITheta,...
            'IZeta',IZeta,...
            'xGB',xGB,...
            'bm',bm,...
            'kBeta',kBeta,... 
            'k',0 ...
            );

% tail rotor structure definition
tailRotor = struct(...
            'class','rigidRotor',...
            'id',label,...
            'active','yes',...
            'R',RT,...
            'b',bT,...
            'e',0.,...
            'theta1',0,...
            'cldata',[a0T 0],...
            'cddata',[deltaT0 0 deltaT2],...
            'profile',@cl1cd2,...
            'Omega',Omega_idle*gT,... 
            'c0',cT, ...
            'c1',0, ... 
            'kBeta',kBetaT,... 
            'k',1 ...
            );

tailRotor = massBlade_mr2inertiaBlade_tr(mainRotor,tailRotor);

% fuselage structure definition
fuselage = struct(...
            'class','fuselage',...
            'id',label,...
            'active','yes',...
            'model',@generalFus,...
            'lf',8.56,...
            'Sp',10,...
            'Ss',12,...
            'kf',1 ...
            );
        
% vertical fin structure definition
verticalFin = struct(...
            'class','stabilizer',...
            'id',label,...
            'active','yes',...
            'airfoil',@naca0012,...
            'type',@get2DStabilizerActions,...
            'c',.3,...
            'S',Sfn,...
            'theta',beta_fn0,...
            'ks',1 ...
            );
        
% horizontal tail definition
% left (pilot's left hand) tail plane
% Looking at drawings of reference [1] there is no horizontal tail plane 
% at the left
leftHTP = struct(...
            'class','stabilizer',...
            'id',label,...
            'active','no',...
            'airfoil',@naca0012,...left
            'type',@get2DStabilizerActions,...
            'c',crHTP,...
            'S',Stp,...
            'theta',alpha_tp0,...
            'ks',1 ...
            );

% right (pilot's right hand) tail plane
rightHTP = struct(...
            'class','stabilizer',...
            'id',label,...
            'active','yes',...
            'airfoil',@naca0012,...
            'type',@get2DStabilizerActions,...
            'c',crHTP,...
            'S',Stp,...
            'theta',alpha_tp0,...
            'ks',1 ...
            );

% transmission
transmission = struct(...
                'transmissionType',@standardTransmission,...
                'etaTmr',0.12,... % FIXME blatant rip-off from Bo105
                'etaTtr',0.07 ... % FIXME blatant rip-off from Bo105
             );

% geometry structure definition

geometry = struct(...
            'class','geometry',...
            'id',label,...
            'xcg',xcg,...
            'ycg',0,...
            'zcg',0,...
            'epsilonx',0,...
            'epsilony',-gamma_s,...
            'ls',0,...
            'ds',0,...
            'h',hR,...
            'thetatr',0,...
            'ltr',-l_T,...
            'dtr',0.0,...
            'htr',-hT,...
            'lvf',-l_fn,...
            'dvf',0,...
            'hvf',-2.04,...
            'Gammavf',pi/2,...
            'llHTP',-l_tp,...
            'dlHTP',-drHTP,...
            'hlHTP',0, ...
            'GammalHTP',0,...
            'lrHTP',-l_tp,...
            'drHTP',drHTP,...
            'hrHTP',0,...
            'GammarHTP',0 ...
            );
        
inertia = struct(...
          'class','inertia',...
          'id',label,...
          'W',Ma*g,...
          'Ix',Ixx,...
          'Iy',Iyy,...
          'Iz',Izz,...
          'Ixy',0,...
          'Ixz',Ixz,...
          'Iyz',0 ...
          );
        
% helicopter definition
he  = struct(...
      'class','rigidHe', ...
      'id',label,...
      'mainRotor',mainRotor,...
      'tailRotor',tailRotor,...
      'fuselage',fuselage,...
      'verticalFin',verticalFin,...
      'leftHTP',leftHTP,...
      'rightHTP',rightHTP,...
      'transmission',transmission,...
      'geometry',geometry,...
      'inertia',inertia ...
);



% atmosphere seems not very clear that it is convenient to be input FIXME
he      = addCharacteristic2he(he,atmosphere);

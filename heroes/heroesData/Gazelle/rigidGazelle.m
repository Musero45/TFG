function he = rigidGazelle(atmosphere)
%
% [1] nasa-tm-88370 pdf
% [2] Teor?a de los Helicopteros (2? edicion)
%
% MISSING DATA
% There are some data which is not included in the information given by [1]
% and it has to be complemented from other references comented before the
% data 
%
% MAIN ROTOR DATA 
%        * flap hinge offset of main rotor blades: e_b
%        * rotor blades mass per unit of length: bm
%        * gravity center of rotor blades: xGB
%        * lag and pitch inertia moments of main rotor blade: ITheta, IZeta,
% 
% The following list is the set of variables provided by [1].
% First column is reference[1]notation
% and second column is heroes notation. This list can be used as a check 
% list to translate technical data from [1] to heroes rigid helicopter data
% 
% a0             mainRotor.cldata(1) [used] check!
% a0T            tailRotor.cldata(1) [used] check!
% alpha_tp0      leftHTP.theta and rightHTP.theta  [used] check!
% beta_fn0       verticalFin.theta  [used] check!
% c              mainRotor.c0 [used] check!
%%% cT             tailRotor.c0 [used] check!
%                tailRotor.Omega = mainRotor.Omega*gT [used] check!
% hR             geometry.h [used] check!
% hT             minus geometry.hTR [used] check!
% IBeta          mainRotor.IBeta [used] check! 
% Ixx            inertia.Ix [used] check! 
% Ixz            inertia.Ixz [used] check! 
% Iyy            inertia.Iy [used] check! 
% Izz            inertia.Iz [used] check! 
% kBeta          mainRotor.kBeta [used] check!
% l_fn           geometry.lvf [used] check!
% l_tp           geometry.llHTP = geometry.lrHTP [used] check!
% l_T            geometry.ltr [used] check!
% Ma             inertia.W [used] check!
% Nb             mainRotor.b [used] check!
%%% bT           tailRotor.b [used] check!
% R              mainRotor.R [used] check!
% RT             tailRotor.R [used] check!
% Sfn            verticalFin.Svf [used] check!
% Stp            rightHTP.Svf / 2 = leftHTP.Svf / 2 [used] check!
% sT             tailRotor solidity [not directly used]
%%% sMR            MainRotor solidity [not directly used]
% xcg            geometry.xcg [used] check!
% delta0         mainRotor.cddata(1) [used] check!
% delta2         mainRotor.cddata(3) [used] check!**
% deltaT0        tailRotor.cddata(1) [used] check!
% deltaT2        tailRotor.cddata(3) [used] check!
% gamma          Lock number at sea level (assumption) [not used]
%                mainRotor.IBeta = rho0*a*c*R^4/gamma
% gamma_s        minus geometry.epsilony [used] check!
% lambda_beta2   squared undamped flap frequency without term of
%                xGB*Mp*e/(I_beta*Omega^2
% theta_tw       mainRotor.theta1  [used] check!
% Omega_idle     mainRotor.Omega [used] check!
%%% Omega_idleTR   tailRotor.Omega [used] check!
%
%
% FIXME Growing structure. Some definitions will be added. To be documented
 
% a0 is obtained from pag.384-386 cl data, run ClCdAlpha.m to see the graph
% in figure 1, where pcl is the vector with the cl formula coeficients.
% It is used M=0.3 to get the cl coeficients by alpha (-20,30)
a0           = 6.21;    
a0T          = 6;    % aproximacion hipotesis
alpha_tp0    = -1;   % HTP cant angle. In flight adjustable HTP-figure2:(-5,7)(?),pag 404 [1]
beta_fn0     = 0;    % VTP cant angle.
c            = 0.35;
cT           = 0.039; 
IBeta        = 375.59; % Blade flap inertia
Ixx          = 800;
Ixz          = 680;
Iyy          = 4200;
Izz          = 3600;

% cg and ca locations, see pag 393:
% Reference axis in main rotor, see pag 405 figure b).
zcg          = -1.32;  
xcg          = -0.09;  
lR           = -xcg;    % X distance from cg to main rotor
h            = -zcg;    % Z distance from cg to main rotor
l_fn         = lR+5.89; % X distance from cg to VTP
l_tp         = lR+4.82; % X distance from cg to HTP
l_T          = lR+5.86; % X distance from cg to tail rotor
h_fn         = h-0.13;  % Z distance from cg to VTP
h_tp         = h-1.10;  % Z distance from cg to HTP
hT           = h-0.83;  % Z distance from cg to tail rotor
% distances form cg are in gazelle cg axis, not in heroes reference, then
% in the structure it should be written with the correct sign.
gamma_s      = -4*pi/180; % shaft angle of attack(?)
hR           = h/cos(-gamma_s);
ls           = lR+hR*sin(-gamma_s);

Ma           = 2013;   % Gross Weight pag 24-> Flight test conditions
Mp           = 39.64;  % Blades mass
Nb           = 3;      % number of blades, Main rotor
bT           = 13;     % number of blades, Tail rotor
R            = 5.25;
RT           = 0.3475;

sT           = 0.4644;
sMR          = 0.06366;

% delta0, delta1 y delta 2 are obtained from pag.384-386 [1] cd data 
% run ClCdAlpha.m to see the graph in figure 2, where pcd is the vector 
% with the cd formula coeficients.
% It is used M=0.3 to get the cl coeficients by alpha (-20,28)
delta0       = 0.0196;   %
delta1       = -0.0017;  % cd= delta2*alpha^2+delta1*alpha+delta0
delta2       = -0.00078; % 
deltaT0      = 00000000; % tail rotor not used
deltaT2      = 00000000; % tail rotor not used

gamma        = 4.5417; % Lock number (1.225.*a0.*c.*R.^4)/IBeta;

theta_tw       = -1.3992*R; % Blade twist(?). Theta1, pag 413 figure 12 [1]
Omega_idle     = 387*2*pi/60;  % paso a rad/s
Omega_idleTR   = 5919*2*pi/60; % paso a rad/s

% bmm           = 112.669;  % Blade mass moment
bm           = 39.64;   % Blade mass

e_a            = 0.11;     % flap hinge offset of main rotor blades
e_b            = 0.475;    % lag hinge offset of main rotor blades

% Position of center of gravity of blade and blade mass per unit of length
xGB          = (R-e_b)./2;  % 0.475 is the lag hinge offset
% Blade section center of gravity (c.g.); pag 13 2)a) [1]
% 0.247.*c

% Some constants
g = atmosphere.g;

%--------------------------------------------------------------------------
% Some assumptions 
%--------------------------------------------------------------------------
% Inertia moments of the blade
% ITheta inertia moment is considered very small and the value used in 
% the practLynx, and the lag inertia moment is computed using the 
% assumption of thin plate
ITheta       = 7; 
IZeta        = IBeta + ITheta; 

% This lengths have been obtained by measuring the drawing and compring it
% with the real length of the helicopter(9.53m)

brHTP        = 0.699;        % right horizontal tail plane span blHTP
crHTP        = 0.445;        % mean chord of the right horizontal tail plane
Stp          = brHTP.*crHTP; % right HTP surface
Sfn          = 0.7104;       % VTP surface
bfn          = 1.0165;       % VTP span
cfn          = Sfn./bfn;     % VTP mean chord
Ss           = 11;           % lateral surface
Sp           = 9;            % upper surface
lf           = 9.53;         % fuselaje length

% lateral distance to left horizontal tail plane centre of pressure
% Reference: my own
drHTP         = brHTP/2;

% % % stiffnes K1; Omega_beta = 40.2124, from figure 15 in pag 415 [1],from the 
% % %              first flap frecuency(6.4Hz) at the rotor rpm.  
% % % assumption: fbeta=6.5Hz -> Omega_beta =40.841
% % % kBeta        = ((40.841/Omega_idle)^2-1-(xGB*Mp*e/IBeta))*IBeta*Omega_idle^2; 
kBeta = 0; % Gazelle rotor is articulated

% rigid tail rotor
% Reference: my own
kBetaT        = 1e100;
%--------------------------------------------------------------------------

% Some computations

% Helicopter label definition
label = 'rigidGazelle';

% main rotor structure definition
mainRotor = struct(...
            'class','rigidRotor',...
            'id',label,...
            'active','yes',...
            'R',R,...
            'e',e_b,...
            'b',Nb,...
            'theta1',theta_tw*pi/180,...
            'cldata',[a0 0],... % a1?
            'cddata',[delta0 delta1 delta2],... 
            'profile',@OA209,... % ??
            'Omega',Omega_idle,...
            'c0',c,... 
            'c1',0,...  
            'IBeta',IBeta,...
            'ITheta',ITheta,...
            'IZeta',IZeta,...
            'xGB',xGB,...
            'bm',bm,...
            'kBeta',kBeta,... 
            'k',1,...
            'solidityMR',sMR...
            );

% tail rotor structure definition
% % tailRotor = struct(...
% %             'class','rigidRotor',...
% %             'id',label,...
% %             'active','yes',...
% %             'R',RT,...
% %             'b',bT,...
% %             'e',0.,...
% %             'theta1',0,...
% %             'cldata',[a0T 0],...
% %             'cddata',[deltaT0 0 deltaT2],...
% %             'profile',@cl1cd2,... 
% %             'Omega',Omega_idleTR,... 
% %             'c0',cT, ...
% %             'c1',0, ... 
% %             'kBeta',kBetaT,... 
% %             'k',1 ...
% %             );
% % poner rotor de cola del bo105 
tailRotor = struct(...
            'class','rigidRotor',...
            'id',label,...
            'active','yes',...
            'R',.95,...%
            'b',2,...% 
            'e',0.,...%
            'theta1',0,...
            'cldata',[5.7 0],...% Padfield [5.7 0]
            'cddata',[0.008 0.00961 0.29395],...
            'profile',@cl1cd2,...
            'Omega',2220*2*pi/60,... % 
            'c0',0.18, ... %
            'c1',0, ... %
            'IBeta',1.805,...% bm/3*R^2
            'ITheta',0.0648,...%
            'IZeta',1.8698,...% 
            'xGB',.475,...% R/2
            'bm',6,...% main rotor bm/(R*c)*(Rt*ct)
            'kBeta',1e100,... %
            'k',1 ...
            );

% % % % tailRotor = massBlade_mr2inertiaBlade_tr(mainRotor,tailRotor);

% Aircraft forces and moments(CD,Clf,CL,Crm,Cpm,Cym) reference of surface 
% and length are the rotor area (A) and the rotor radius(R). 
% See pag 6 of [1]. This is apllied for the fuselage, and tail plain.

% fuselage structure definition
fuselage = struct(...
            'class','fuselage',...
            'id',label,...
            'active','yes',...
            'model',@GazelleFus,... 
            'lf',R,...    
            'Sp',pi*R.^2,...   
            'Ss',pi*R.^2,... 
            'kf',1 ...
            );       
        
% vertical fin structure definition
verticalFin = struct(...
            'class','stabilizer',...
            'id',label,...
            'active','yes',...
            'airfoil',[],... 
            'type',@get2D_VTP_body,...
            'c',R,...  
            'S',pi*R.^2,...
            'theta',beta_fn0*pi/180,...
            'ks',1 ...
            );    
        
% horizontal tail definition
% left (pilot's left hand) tail plane
leftHTP = struct(...
            'class','stabilizer',...
            'id',label,...
            'active','no',...
            'airfoil',@airfoilHTPGazelle,...left
            'type',@get2D_HTP_body,...
            'c',R/2,...
            'S',0.5*pi*R.^2,...
            'theta',alpha_tp0*pi/180,... % cant angle in Heroes have different sign
            'ks',1 ...
            );
 
% right (pilot's right hand) tail plane
rightHTP = struct(...
            'class','stabilizer',...
            'id',label,...
            'active','yes',...
            'airfoil',@airfoilHTPGazelle,...right
            'type',@get2D_HTP_body,...
            'c',R/2,...
            'S',0.5*pi*R.^2,...
            'theta',alpha_tp0*pi/180,... % cant angle in Heroes have different sign
            'ks',1 ...
            );

% transmission
transmission = struct(...
                'transmissionType',@standardTransmission,...
                'etaTmr',0.12,... % ??
                'etaTtr',0.07 ... % ??
             );

% geometry structure definition
%  distances have a - because the reference of gazellce is the opposite to
% the reference of Heroes.
geometry = struct(...
            'class','geometry',...
            'id',label,...
            'xcg',0,...  %Of=cg?
            'ycg',0,...    
            'zcg',0,...  %Of=cg?
            'epsilonx',0,...
            'epsilony',gamma_s,... % different sign criteria in Heroes than in [1]
            'ls',ls,...   
            'ds',0,...
            'h',hR,...
            'thetatr',0,...
            'ltr',-l_T,...
            'dtr',0.0,...
            'htr',-hT,...
            'lvf',-l_fn,...
            'dvf',0,...
            'hvf',-h_fn,... 
            'Gammavf',pi/2,...
            'llHTP',-l_tp,...
            'dlHTP',-drHTP,...
            'hlHTP',-h_tp,... 
            'GammalHTP',0,...
            'lrHTP',-l_tp,...
            'drHTP',drHTP,...
            'hrHTP',-h_tp,...  
            'GammarHTP',0 ...
            );
        
inertia = struct(...
          'class','inertia',...
          'id',label,...
          'W',Ma*g,...
          'Ix',Ixx,...
          'Iy',Iyy,...
          'Iz',Izz,...
          'Ixy',0,...
          'Ixz',Ixz,...
          'Iyz',0 ...
          );    
        
% helicopter definition
he  = struct(...
      'class','rigidHe', ...
      'id',label,...
      'mainRotor',mainRotor,...
      'tailRotor',tailRotor,...
      'fuselage',fuselage,...
      'verticalFin',verticalFin,...
      'leftHTP',leftHTP,...
      'rightHTP',rightHTP,...
      'transmission',transmission,...
      'geometry',geometry,...
      'inertia',inertia ...
);

% atmosphere seems not very clear that it is convenient to be input FIXME
he      = addCharacteristic2he(he,atmosphere);

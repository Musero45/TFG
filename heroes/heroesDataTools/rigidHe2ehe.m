function energyHe = rigidHe2ehe(rigidHe,atmosphere)
%RIGIDHE2EHE Transforms a rigid helicopter into a energy helicopter


% Energy parameters
kappa     = rigidHe.DR.energyEstimations.kappa;
K         = rigidHe.DR.energyEstimations.K;
cd0       = rigidHe.DR.energyEstimations.cd0;
f         = rigidHe.DR.estimations.f;
eta_ra    = rigidHe.DR.energyEstimations.eta_ra;
etaTrp    = rigidHe.DR.energyEstimations.etaTrp;
etaTra    = rigidHe.DR.energyEstimations.etaTra;

% Define label
label = rigidHe.id;

% Obtain main rotor data from rigid helicopter 
R         = rigidHe.mainRotor.R;
b         = rigidHe.mainRotor.b;
c         = rigidHe.mainRotor.c0;
OmegaRAD  = rigidHe.mainRotor.Omega;
cldata    = rigidHe.mainRotor.cldata;
cddata    = rigidHe.mainRotor.cddata;
profile   = rigidHe.mainRotor.profile;


% main rotor definition
mainRotor = struct(...
            'class','rotor',...
            'id',label,...
            'eta',0.06,... 
            'R',R,... 
            'b',b,...
            'cldata',cldata,... 
            'cddata',cddata,...
            'profile',profile,...
            'Omega',OmegaRAD,... 
            'c',c, ... 
            'kappa',kappa,... 
            'K',K,...
            'cd0', cd0...
);


% Obtain tail rotor data from rigid helicopter 
R         = rigidHe.tailRotor.R;
b         = rigidHe.tailRotor.b;
c         = rigidHe.tailRotor.c0;
OmegaRAD  = rigidHe.tailRotor.Omega;
cldata    = rigidHe.mainRotor.cldata;
cddata    = rigidHe.mainRotor.cddata;

% tail rotor definition
tailRotor = struct(...
            'class','rotor',...
            'id',label,...
            'eta',eta_ra,... % FIXME
            'R',R,...
            'b',b,...
            'cldata',cldata,...
            'cddata',cddata,...
            'Omega',OmegaRAD,...
            'c',c, ...
            'kappa',kappa,...
            'K',K,...
            'cd0', cd0 ...
);


% fuselage definition
fuselage   = struct(...
            'class','fuselage',...
            'id',label,...
             'f',f ...% equivalent flat plate area [m^2] S*Cd Modificar con Sbody
);




% transmission definition
transmission = struct(...
            'class','transmission',...
            'id',label,...
            'etaTra',etaTra,... %p?rdidas de trans rotor antipar
            'etaTrp',etaTrp ...% princial
);

% Maximun transmission power
Pmt                 = rigidHe.dimensioningPerformances.TakeOffTransmissionRating;

% It seems that the next line was a missinterpretation of Rand paper and 
% the number of engines has not nothing to do with Pmt
% Pmt                 = rigidhe.Performances.TakeOffTransmissionRating* ...
%                       rigidhe.Engine.numEngines;
fPmt                = @(h) Pmt*ones(size(h));
transmission.fPmt   = fPmt;
transmission.Pmt    = Pmt;

% FIXME discuss about this point
[etaMrp,etaMra,etaM] = getEtaM(transmission,eta_ra);
transmission.etaMrp  = etaMrp;
transmission.etaMra  = etaMra;
transmission.etaM    = etaM;

% Weights
weights.MTOW = rigidHe.inertia.MTOW;
weights.OEW  = rigidHe.inertia.OEW;
weights.MPL  = rigidHe.inertia.MPL;
weights.MFW  = rigidHe.inertia.MFW;

% helicopter definition
% aproximation rotor distance
x_tr         = -rigidHe.geometry.ltr; 
W            = rigidHe.inertia.W;
Mf           = rigidHe.inertia.FW/atmosphere.g;



% Get available power taken into account transmission power limitation
availablePower =engine_transmission2availablePower(rigidHe.engine,transmission);

energyHe  = struct(...
      'class','ehe', ...
      'id',label,...
      'mainRotor',mainRotor,...
      'tailRotor',tailRotor,...
      'engine',rigidHe.engine,... 
      'fuselage',fuselage, ...
      'transmission',transmission,...
      'weights',weights,...
      'availablePower',availablePower,...
      'Mf',Mf,...
      'W',W,...% N
      'x_tr',x_tr...
);


% atmosphere seems not very clear that it is convenient to be input FIXME
energyHe      = addCharacteristic2he(energyHe,atmosphere);

end

